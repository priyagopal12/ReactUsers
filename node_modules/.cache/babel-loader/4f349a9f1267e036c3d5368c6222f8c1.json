{"ast":null,"code":"var _jsxFileName = \"D:\\\\darshu\\\\Internship_darshu\\\\NemesisReact\\\\nemesis\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./Components/Navbar\";\nimport MaterialTable from 'material-table';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  const getUsers = () => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(response => setData(response));\n  };\n\n  const columns = [{\n    title: \"Name\",\n    field: \"name\",\n    validate: rowData => rowData.name === undefined || rowData.name === \"\" ? \"Required\" : true\n  }, {\n    title: \"Username\",\n    field: \"username\"\n  }, {\n    title: \"Email\",\n    field: \"email\"\n  }, {\n    title: \"Phone\",\n    field: \"phone\"\n  }, {\n    title: \"Website\",\n    field: \"website\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \"React Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"User Details\",\n      columns: columns,\n      data: data,\n      options: {\n        actionsColumnIndex: -1,\n        addRowPosition: \"first\"\n      },\n      editable: {\n        onRowAdd: newData => new Promise((resolve, reject) => {\n          fetch('https://jsonplaceholder.typicode.com/users', {\n            method: \"POST\",\n            headers: {\n              'Content-type': \"application/json\"\n            },\n            body: JSON.stringify(newData)\n          }).then(response => response.json()).then(response => {\n            getUsers();\n            resolve();\n          });\n        }),\n        onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n          fetch('https://jsonplaceholder.typicode.com/users/' + oldData.id, {\n            method: \"PUT\",\n            headers: {\n              'Content-type': \"application/json\"\n            },\n            body: JSON.stringify(newData)\n          }).then(response => response.json()).then(response => {\n            getUsers();\n            resolve();\n          });\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          fetch('https://jsonplaceholder.typicode.com/users/' + oldData.id, {\n            method: \"DELETE\",\n            headers: {\n              'Content-type': \"application/json\"\n            }\n          }).then(response => response.json()).then(response => {\n            getUsers();\n            resolve();\n          });\n        })\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/darshu/Internship_darshu/NemesisReact/nemesis/src/App.js"],"names":["React","useEffect","useState","Navbar","MaterialTable","App","data","setData","getUsers","fetch","then","response","json","columns","title","field","validate","rowData","name","undefined","actionsColumnIndex","addRowPosition","onRowAdd","newData","Promise","resolve","reject","method","headers","body","JSON","stringify","onRowUpdate","oldData","id","onRowDelete"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ;AACT,GAFQ,EAEP,EAFO,CAAT;;AAIA,QAAMA,QAAQ,GAAG,MAAK;AACpBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMC,QAAQ,IAAIJ,OAAO,CAACI,QAAD,CAFzB;AAGD,GAJD;;AAKA,QAAME,OAAO,GAAG,CACd;AAACC,IAAAA,KAAK,EAAE,MAAR;AAAiBC,IAAAA,KAAK,EAAE,MAAxB;AAA+BC,IAAAA,QAAQ,EAACC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAeC,SAAf,IAA4BF,OAAO,CAACC,IAAR,KAAe,EAA3C,GAA8C,UAA9C,GAAyD;AAA5G,GADc,EAEd;AAACJ,IAAAA,KAAK,EAAE,UAAR;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAFc,EAGd;AAACD,IAAAA,KAAK,EAAE,OAAR;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAHc,EAId;AAACD,IAAAA,KAAK,EAAE,OAAR;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAJc,EAKd;AAACD,IAAAA,KAAK,EAAE,SAAR;AAAoBC,IAAAA,KAAK,EAAE;AAA3B,GALc,CAAhB;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,aAAD;AACE,MAAA,KAAK,EAAC,cADR;AAEE,MAAA,OAAO,EAAEF,OAFX;AAGE,MAAA,IAAI,EAAEP,IAHR;AAIE,MAAA,OAAO,EAAE;AAACc,QAAAA,kBAAkB,EAAC,CAAC,CAArB;AAAuBC,QAAAA,cAAc,EAAC;AAAtC,OAJX;AAKE,MAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAEC,OAAD,IAAa,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACpDjB,UAAAA,KAAK,CAAC,4CAAD,EAA8C;AACjDkB,YAAAA,MAAM,EAAC,MAD0C;AAEjDC,YAAAA,OAAO,EAAC;AACN,8BAAe;AADT,aAFyC;AAKjDC,YAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeR,OAAf;AAL4C,WAA9C,CAAL,CAMGb,IANH,CAMQC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EANlB,EAOCF,IAPD,CAOMC,QAAQ,IAAE;AAACH,YAAAA,QAAQ;AACzBiB,YAAAA,OAAO;AAAG,WARV;AASD,SAVqB,CADd;AAYRO,QAAAA,WAAW,EAAC,CAACT,OAAD,EAASU,OAAT,KAAqB,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AAC/DjB,UAAAA,KAAK,CAAC,gDAA8CwB,OAAO,CAACC,EAAvD,EAA0D;AAC7DP,YAAAA,MAAM,EAAC,KADsD;AAE7DC,YAAAA,OAAO,EAAC;AACN,8BAAe;AADT,aAFqD;AAK7DC,YAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeR,OAAf;AALwD,WAA1D,CAAL,CAMGb,IANH,CAMQC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EANlB,EAOCF,IAPD,CAOMC,QAAQ,IAAE;AAACH,YAAAA,QAAQ;AACzBiB,YAAAA,OAAO;AAAG,WARV;AASD,SAVgC,CAZzB;AAuBRU,QAAAA,WAAW,EAAEF,OAAD,IAAa,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACvDjB,UAAAA,KAAK,CAAC,gDAA8CwB,OAAO,CAACC,EAAvD,EAA0D;AAC7DP,YAAAA,MAAM,EAAC,QADsD;AAE7DC,YAAAA,OAAO,EAAC;AACN,8BAAe;AADT;AAFqD,WAA1D,CAAL,CAKGlB,IALH,CAKQC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EALlB,EAMCF,IAND,CAMMC,QAAQ,IAAE;AAACH,YAAAA,QAAQ;AACzBiB,YAAAA,OAAO;AAAG,WAPV;AAQD,SATwB;AAvBjB;AALZ;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD;;GAhEQpB,G;;KAAAA,G;AAkET,eAAeA,GAAf","sourcesContent":["import React,{useEffect, useState} from \"react\";\nimport Navbar from \"./Components/Navbar\";\nimport MaterialTable from 'material-table';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([])\n  useEffect(() => {\n    getUsers()\n  },[])\n\n  const getUsers = () =>{\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(response => setData(response))\n  }\n  const columns = [\n    {title: \"Name\" , field: \"name\",validate:rowData => rowData.name===undefined || rowData.name===\"\"?\"Required\":true},\n    {title: \"Username\" , field: \"username\"},\n    {title: \"Email\" , field: \"email\"},\n    {title: \"Phone\" , field: \"phone\"},\n    {title: \"Website\" , field: \"website\"}\n  ]\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <h1 align=\"center\">React Application</h1>\n      <MaterialTable\n        title=\"User Details\"\n        columns={columns}\n        data={data}\n        options={{actionsColumnIndex:-1,addRowPosition:\"first\"}}\n        editable={{\n          onRowAdd:(newData) => new Promise((resolve,reject) => {\n            fetch('https://jsonplaceholder.typicode.com/users',{\n              method:\"POST\",\n              headers:{\n                'Content-type':\"application/json\"\n              },\n              body:JSON.stringify(newData)\n            }).then(response=>response.json())\n            .then(response=>{getUsers()\n            resolve()})\n          }),\n          onRowUpdate:(newData,oldData) => new Promise((resolve,reject) => {\n            fetch('https://jsonplaceholder.typicode.com/users/'+oldData.id,{\n              method:\"PUT\",\n              headers:{\n                'Content-type':\"application/json\"\n              },\n              body:JSON.stringify(newData)\n            }).then(response=>response.json())\n            .then(response=>{getUsers()\n            resolve()})\n          }),\n          onRowDelete:(oldData) => new Promise((resolve,reject) => {\n            fetch('https://jsonplaceholder.typicode.com/users/'+oldData.id,{\n              method:\"DELETE\",\n              headers:{\n                'Content-type':\"application/json\"\n              }\n            }).then(response=>response.json())\n            .then(response=>{getUsers()\n            resolve()})\n          })\n        }}\n      />\n    </div>   \n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}